CMAKE_MINIMUM_REQUIRED(VERSION 3.17)
PROJECT(Cavs CXX CUDA)

set(CMAKE_CXX_STANDARD 14)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)

INCLUDE_DIRECTORIES(${PROJECT_SOURCE_DIR})
INCLUDE_DIRECTORIES(BEFORE ${PROJECT_BINARY_DIR})
LIST(APPEND CMAKE_MODULE_PATH ${PROJECT_SOURCE_DIR}/cmake/module)

FIND_PACKAGE(MPI REQUIRED COMPONENTS CXX)
IF(MPI_CXX_FOUND)
  MESSAGE(STATUS "MPI compiler found:" ${MPI_CXX_COMPILER})
  MESSAGE(STATUS "MPI compile flags: " ${MPI_CXX_COMPILE_FLAGS})
  MESSAGE(STATUS "MPI include path: " ${MPI_CXX_INCLUDE_DIRS})
  MESSAGE(STATUS "MPI LINK flags: " ${MPI_CXX_LINK_FLAGS})
  MESSAGE(STATUS "MPI libraries: " ${MPI_CXX_LIBRARIES})
  #INCLUDE_DIRECTORIES(SYSTEM ${MPI_CXX_INCLUDE_DIRS})
  LIST(APPEND EXTERNAL_LIBS MPI::MPI_CXX)
ENDIF()

FIND_PACKAGE(CUDAToolkit 8.0 REQUIRED)
IF(CUDAToolkit_FOUND)
  MESSAGE(STATUS "CUDA version:" ${CUDAToolkit_VERSION})
  MESSAGE(STATUS "CUDA toolkit root dir:" ${CUDAToolkit_LIBRARY_ROOT})
  MESSAGE(STATUS "CUDA include dir:" ${CUDAToolkit_INCLUDE_DIRS})
  LIST(APPEND EXTERNAL_LIBS CUDA::cudart CUDA::cublas CUDA::nvrtc CUDA::cuda_driver)
ENDIF()

FIND_PACKAGE(CUDNN 7.0 REQUIRED)
IF(CUDNN_FOUND)
  MESSAGE(STATUS "CUDNN include dirs:" ${CUDNN_INCLUDE_DIRS})
  MESSAGE(STATUS "CUDNN libraries:" ${CUDNN_LIBRARIES})
  MESSAGE(STATUS "CUDNN library dirs:" ${CUDA_LIBRARY_DIRS})
  LIST(APPEND EXTERNAL_LIBS ${CUDNN_LIBRARIES})
ENDIF()

FIND_PACKAGE(Protobuf REQUIRED)
IF(Protobuf_FOUND)
  MESSAGE(STATUS "protobuf include dir:" ${protobuf_INCLUDE_DIRS})
  MESSAGE(STATUS "protobuf libraries:" ${protobuf_LIBRARIES_TARGETS})
  MESSAGE(STATUS "protobuf protoc executable:" ${protobuf_PROTOC_EXECUTABLE})
  LIST(APPEND EXTERNAL_LIBS protobuf::libprotobuf)
ENDIF()

FIND_PACKAGE(glog REQUIRED)
IF(glog_FOUND)
  MESSAGE(STATUS "glog include dirs:" ${glog_INCLUDE_DIRS})
  MESSAGE(STATUS "glog libraries:" ${glog_LIBRARIES})
  LIST(APPEND EXTERNAL_LIBS glog::glog)
ENDIF()

FIND_PACKAGE(gflags REQUIRED)
IF(gflags_FOUND)
  MESSAGE(STATUS "gflags include dirs:" ${gflags_INCLUDE_DIRS})
  MESSAGE(STATUS "gflags libraries:" ${gflags_LIBRARIES})
  LIST(APPEND EXTERNAL_LIBS gflags::gflags)
ENDIF()

FIND_PACKAGE(Boost REQUIRED)
LIST(APPEND EXTERNAL_LIBS Boost::boost)

SET(EXECUTABLE_OUTPUT_PATH, "${PROJECT_SOURCE_DIR/bin}")
SET(LIBRARY_OUTPUT_PATH, "${PROJECT_SOURCE_DIR/lib}")

ADD_SUBDIRECTORY(cavs)
ADD_SUBDIRECTORY(apps)
